// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DigitalReefSDK
import AVKit
import AdSupport
import AppTrackingTransparency
import AuthenticationServices
import CoreMedia
import CoreTelephony
@_exported import DigitalReefSDK
import Foundation
import Foundation/*.Data*/
import ImageIO
import Network
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import os
import zlib
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class DigitalReef : ObjectiveC.NSObject {
  @objc public static let shared: DigitalReefSDK.DigitalReef
  @objc public static func includeMediaAttachment(request: UserNotifications.UNNotificationRequest, mutableContent: UserNotifications.UNMutableNotificationContent, contentHandler: @escaping ((UserNotifications.UNNotificationContent) -> Swift.Void))
  @objc public static func requestPushPermission()
  @objc public static func sendEvent(name: Swift.String)
  @objc public static func sendEvent(name: Swift.String, seconds: Swift.Int)
  @objc public func fetchAds()
  @objc public func fetchClientID() -> Swift.String
  @objc public func showRating()
  @objc public func syncDeviceData()
  @objc public func deviceData() -> Swift.String
  @objc public func sendAdAnalytics()
  @objc public func removeAllInDb()
  @objc public func testCompression()
  @objc public func logsConsoleData()
  @objc public func realmDb()
  @objc public func requestAppTrackingTransparencyPermission()
  @objc public func setClientAttributes(attributes: DigitalReefSDK.ClientAttributes)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class InAPPUIButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var inAppContent: DigitalReefSDK.InAppContent?
  @objc @_Concurrency.MainActor(unsafe) public var deeplink: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var ctaType: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InAppMessageService : ObjectiveC.NSObject {
  @objc public static let shared: DigitalReefSDK.InAppMessageService
  @objc public func saveMessage(_ item: DigitalReefSDK.DRInAppHelper)
  @objc public func saveHistory(_ item: DigitalReefSDK.DRInAppModel, sessionId: Swift.String)
  @objc public func removeMessage(_ id: Swift.String)
  @objc public func removeStaleMessages()
  @objc public func removeStaleHistory()
  @objc public func getAll() -> [DigitalReefSDK.DRInAppModel]
  @objc public func getLaunchInAppMessages() -> [DigitalReefSDK.DRInAppModel]
  @objc public func checkInAppAdExists(_ id: Swift.String) -> Swift.Bool
  @objc public func getPushClickInAppMessages(_ id: Swift.String) -> [DigitalReefSDK.DRInAppModel]
  @objc public func updateAdShown(_ id: Swift.String) -> Swift.Bool
  @objc public func getInAppMessagesFromInAppEvent(_ eventName: Swift.String) -> [DigitalReefSDK.DRInAppModel]
  @objc public func countMessagesViewedHistorically(_ timeDelta: Swift.Int) -> Swift.Int32
  @objc public func countMessagesViewedHistoricallyByMessageWithId(_ id: Swift.String, timeDelta: Swift.Int) -> Swift.Int32
  @objc public func countMessagesViewedHistoricallyByCategory(_ category: Swift.String, timeDelta: Swift.Int) -> Swift.Int32
  @objc public func countMessagesViewedInThisSession(_ sessionId: Swift.String) -> Swift.Int32
  @objc public func countMessagesViewedInThisSessionByCategory(category: Swift.String, sessionId: Swift.String) -> Swift.Int32
  @objc public func countMessagesViewedInThisSessionByMessage(messageId: Swift.String, sessionId: Swift.String) -> Swift.Int32
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class AdAnalyticsManager : ObjectiveC.NSObject {
  @objc public class func sharedInstance() -> DigitalReefSDK.AdAnalyticsManager
  @objc public func adShownAnalytics(adId: Swift.String, campaignId: Swift.String)
  @objc public func adClosedAnalytics(adId: Swift.String, campaignId: Swift.String, hasVideo: Swift.Bool, videoView: DigitalReefSDK.UIVideoView?)
  @objc public func adClosedWithNewNotification(adId: Swift.String, campaignId: Swift.String, hasVideo: Swift.Bool, videoView: DigitalReefSDK.UIVideoView?)
  @objc public func adBtnActionAnalytics(adId: Swift.String, campaignId: Swift.String, hasVideo: Swift.Bool, videoView: DigitalReefSDK.UIVideoView?, ctaLink: Swift.String, urlData: Swift.String)
  @objc public func adContentErrorAdAnalytics(adId: Swift.String, campaignId: Swift.String)
  @objc public func gifDisplayedAdAnalytics(adId: Swift.String, campaignId: Swift.String)
  @objc public func gifCompletedAdAnalytics(adId: Swift.String, campaignId: Swift.String)
  @objc deinit
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: DigitalReefSDK.CompressionLevel
  public static let bestSpeed: DigitalReefSDK.CompressionLevel
  public static let bestCompression: DigitalReefSDK.CompressionLevel
  public static let defaultCompression: DigitalReefSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: DigitalReefSDK.GzipError.Kind, b: DigitalReefSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: DigitalReefSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: DigitalReefSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class AdLoader : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let activityIndicatorView: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func closeAdLoader()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias InAppMessageData = [Swift.AnyHashable : Any]
@objc final public class LocalInAppMessage : ObjectiveC.NSObject {
  final public var messageShownComplete: Swift.Bool
  public init(_ data: DigitalReefSDK.InAppMessageData)
  public init(_ model: DigitalReefSDK.DRInAppModel)
  final public func show(_ completion: (() -> Swift.Void)?)
  final public func closeEngagementAd()
  @objc deinit
}
@objc @objcMembers public class ClientAttributes : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(PHONE_NUMBER: Swift.String? = nil, CARRIER: Swift.String? = nil, BILL_TYPE: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class AdEvents : ObjectiveC.NSObject {
  @objc public init(key: Swift.String, value: Any)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GzManager : ObjectiveC.NSObject {
  @objc public static let shared: DigitalReefSDK.GzManager
  @objc public func gzipped(dataToBeCompressed: Foundation.Data)
  @objc public func gunzippedDictionary(dataContent: Swift.String) -> Foundation.NSDictionary?
  @objc public func testGzip()
  @objc public func testDecompress()
  @objc deinit
}
public struct Ad : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InAppContent : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DRNotificationHandler : ObjectiveC.NSObject {
  @objc public static let shared: DigitalReefSDK.DRNotificationHandler
  @objc public var engagementPushClicked: Swift.Bool
  @objc public var engagementInAppOpened: Swift.Bool
  @objc public func logToSDK(msg: Swift.String)
  @objc public func removeAdFromDB(adId: Swift.String, campaignId: Swift.String)
  @objc public func addAdtoDB(adSourceType: Swift.String) -> Swift.Bool
  @objc public func getOptInType() -> Swift.String
  public func showInAppMessages()
  public func updateOnlyInAppAdShownInDB(_ id: Swift.String)
  public func checkInAppAdExists(_ id: Swift.String) -> Swift.Bool
  public func showPushClickedInAppMessages(_ id: Swift.String)
  public func deleteAllInAppMessages()
  @objc public func closeLoader()
  @objc deinit
}
extension DigitalReefSDK.DRNotificationHandler {
  @objc dynamic public func requestPermission()
  @objc dynamic public func didReceiveAPNSToken(_ token: Swift.String)
  @objc dynamic public func willPresentNotification(_ notification: UserNotifications.UNNotification)
  @objc dynamic public func didReceiveRemoteNotification(_ info: Foundation.NSDictionary)
  @objc dynamic public func didReceiveNotificationResponse(_ response: UserNotifications.UNNotificationResponse)
  @objc dynamic public func alertReceived(_ info: Foundation.NSDictionary, adId: Swift.String)
}
@_hasMissingDesignatedInitializers public class Logs {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LocalLogs {
  public static var shared: DigitalReefSDK.LocalLogs
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let didUpdateIDFA: Foundation.Notification.Name
  public static let updateCurrentSeekTime: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class RealmManager {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class CustomNav : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class UIVideoView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var videoHeight: CoreGraphics.CGFloat?
  @objc @_Concurrency.MainActor(unsafe) public var adType: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var adId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var campaignId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var player: AVFoundation.AVPlayer?
  @objc @_Concurrency.MainActor(unsafe) public var playerLayer: AVFoundation.AVPlayerLayer?
  @_Concurrency.MainActor(unsafe) public var ad: DigitalReefSDK.Ad?
  @objc @_Concurrency.MainActor(unsafe) public var videoUrl: Foundation.URL?
  @objc @_Concurrency.MainActor(unsafe) public var fullScreenVideo: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var top: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var bottom: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var trailing: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var leading: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var backgroundImg: UIKit.UIImageView?
  @objc @_Concurrency.MainActor(unsafe) public var playerItem: AVFoundation.AVPlayerItem?
  @objc @_Concurrency.MainActor(unsafe) public var videoWatchedSeconds: Swift.String
  @_Concurrency.MainActor(unsafe) public var totalVideoLength: Swift.Float64?
  @_Concurrency.MainActor(unsafe) public var videoPercentage: Swift.Double?
  @objc @_Concurrency.MainActor(unsafe) public var videoEnded: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var videoFormatFullOrPartial: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var avAsset: AVFoundation.AVAsset?
  @objc @_Concurrency.MainActor(unsafe) final public let activityIndicatorView: UIKit.UIActivityIndicatorView
  @objc @_Concurrency.MainActor(unsafe) final public let currentTimeLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let videoLengthLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var isPlaying: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func setPauseIcon()
  @objc @_Concurrency.MainActor(unsafe) public func setPlayIcon()
  @objc @_Concurrency.MainActor(unsafe) public func setSoundIcon()
  @objc @_Concurrency.MainActor(unsafe) public func setMuteIcon()
  @objc @_Concurrency.MainActor(unsafe) public var isMuted: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @_Concurrency.MainActor(unsafe) public func setVolumeIcon()
  @objc @_Concurrency.MainActor(unsafe) public func playVideo(videoUrl url: Foundation.URL, videoAsset avAsset: AVFoundation.AVAsset?, image imageView: UIKit.UIImageView?, fullScrnMode fullScreenMode: Swift.Bool, muted videoMuted: Swift.Bool, videoFrmtFull videoFormatFull: Swift.Bool, adId adIdInfo: Swift.String, campaignId campaignIdInfo: Swift.String, adType adTypeInfo: Swift.String, height videoHeight: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func pauseVideo()
  @objc @_Concurrency.MainActor(unsafe) public func playVideo()
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) public func loadGif(asset: Swift.String)
}
@objc extension UIKit.UIImage {
  @objc dynamic public class func gifForObjc(data: Foundation.Data, scale: CoreGraphics.CGFloat) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> (UIKit.UIImage?, Foundation.TimeInterval)
  public class func gif(url: Swift.String) -> (UIKit.UIImage?, Foundation.TimeInterval)
  public class func gif(name: Swift.String) -> (UIKit.UIImage?, Foundation.TimeInterval)
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> (UIKit.UIImage?, Foundation.TimeInterval)
}
@_hasMissingDesignatedInitializers public class Reachability {
  public static func isConnected() -> Swift.Bool
  @objc deinit
}
